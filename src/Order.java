import java.io.FileWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.ArrayList;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class Order {

	private String orderID;
	private Date orderDate;
	private Product product;
	private int quantity;
	private Date expectedDeliveryDate;
	private Date dateReceived;
	private boolean received;
	
	private boolean active;
	
	public Order(Date orderDate, 
			Product product, int quantity, 
			Date expectedDeliveryDate) throws ParseException  {
		
		this.orderID = "Order"+(RetailSystem.getInstance().getOrders().size()+1);
		this.orderDate = orderDate;
		this.product = product;
		this.quantity = quantity;
		this.expectedDeliveryDate = expectedDeliveryDate;
		this.dateReceived = expectedDeliveryDate ;
		this.active = true;
	}
	
	public Order(Date orderDate, 
			Product product, int quantity, 
			Date expectedDeliveryDate, Date dateReceived, boolean received) throws ParseException  {

		this.orderID = "Order"+(RetailSystem.getInstance().getOrders().size()+1);
		this.orderDate = orderDate;
		this.product = product;
		this.quantity = quantity;
		this.expectedDeliveryDate = expectedDeliveryDate;
		this.dateReceived = dateReceived;
		this.received = received;
		this.active = true;
	}
	
	public Order(Date orderDate, 
			Product product, int quantity, 
			Date expectedDeliveryDate, Date dateReceived, boolean received, boolean active) throws ParseException  {

		this.orderID = "Order"+(RetailSystem.getInstance().getOrders().size()+1);
		this.orderDate = orderDate;
		this.product = product;
		this.quantity = quantity;
		this.expectedDeliveryDate = expectedDeliveryDate;
		this.dateReceived = dateReceived;
		this.received = received;
		this.active = active;
	}
	
	public Order(String orderID, Date orderDate, 
			Product product, int quantity, 
			Date expectedDeliveryDate, Date dateReceived, boolean received, boolean active) throws ParseException  {

		this.orderID = orderID;
		this.orderDate = orderDate;
		this.product = product;
		this.quantity = quantity;
		this.expectedDeliveryDate = expectedDeliveryDate;
		this.dateReceived = dateReceived;
		this.received = received;
		this.active = active;
	}
	
	/*
	 * 
	 * Method to populate a JComboBox with Products
	 * 
	 * */
	public static JComboBox<String> getProducts(JComboBox<String> comboBoxList) {
		
		JComboBox<String> productList = new JComboBox<String>();
		
		for(Product p : RetailSystem.getInstance().getProducts()) {
				
				if(p.isActive()==true) {
					
					comboBoxList.addItem(p.getProductID() + " - " + p.getName());
					
				}
			}
		
		return productList;
		
	}
	
	public static Product getProductFromComboBox( String productID ) {
		
		Product product = null;
		
		for( Product p : RetailSystem.getInstance().getProducts() ) {
			
			if( productID.contains(p.getProductID()) ) {
				
				product = p;
				
			}
			
		}
		
		return product;
		
	}
	
	/*
	 * 
	 * Method to populate a JComboBox with Orders
	 * 
	 * */
	public static JComboBox<String> getOrders(JComboBox<String> comboBoxList) {
		
		JComboBox<String> orderList = new JComboBox<String>();
		
		for(Order o : RetailSystem.getInstance().getOrders()) {
					
				comboBoxList.addItem(o.getOrderID());
				
			}
		
		return orderList;
		
	}
	
	/*
	 * 
	 * Method to populate a JComboBox with Orders
	 * 
	 * */
	public static JComboBox<String> getOrdersCheck(JComboBox<String> comboBoxList) {
		
		JComboBox<String> orderList = new JComboBox<String>();
		
		for(Order o : RetailSystem.getInstance().getOrders()) {
			
				if( o.isActive() && !o.isReceived() ) {
					
					comboBoxList.addItem(o.getOrderID());
					
				}
				
			}
		
		return orderList;
		
	}
	
	public static int getActiveOrdersCount() {
		
		int count = 0;
		
		for(Order o : RetailSystem.getInstance().getOrders()) {
			
				if( o.isActive() ) {
					
					count++;
					
				}
				
			}
		
		return count;
		
	}
	
	/*
	 * 
	 * If the ReceivedDate is equal to the ExpectedDeliveryDate
	 * set iReceived to true
	 * 
	 * */
	public static boolean receivedOrder() {
		
		boolean received = false;
		
		for(Order p : RetailSystem.getInstance().getOrders()) {
			
			if(p.dateReceived.equals(p.expectedDeliveryDate)) {
				
				received=true;
			
			}
			
		}
		
		return received;
	
	}
	
	/*
	 * 
	 * AutoGeneratedOrder:
	 * Creates a new Order in the RetailSystem if when CreatingAnInvoice 
	 * and that Invoice causes Stock to be depleted below a minimum Stock amount
	 * 
	 * */
	public static void orderMore() {
			
			for(Stock stock : RetailSystem.getInstance().getStocks()) {
				
				boolean isOK = true;
				
				if(stock.getUnits() < 5) {
					
					for(Order order : RetailSystem.getInstance().getOrders()) {
					
						if(order.getProduct().getProductID().equals(stock.getProduct().getProductID()) && !order.isReceived() && order.isActive()) {
							
							isOK = false;
							
							break;
							
						}
							
					}
					
					if( isOK ) {
						
						try {
						
						Order newOrder = new Order( new Date(), stock.getProduct(),10, new Date() );
						
						RetailSystem.getInstance().getOrders().add(newOrder);
						
						saveOrder();
						
					} catch (ParseException e) {
						
						e.printStackTrace();
					
					}
						
				}	
			
			}		
		
		}
	
	}
	
	public static boolean searchOrderByDate( Date orderDate, String date ) {
		
		boolean isAMatch = false;
		
		String oldStringDate = date;
		
		Date newDate = null;
		
		try {
			
			newDate = new SimpleDateFormat("dd-MMM-yyyy").parse(oldStringDate);
			
		} catch ( ParseException e ) {
			
			e.printStackTrace();
			
			JOptionPane.showMessageDialog(null, "Date format must be in the form: dd-MMM-yyyy");
			
		}
			
		if( orderDate.equals(newDate) ) {
			
			isAMatch = true;
			
		}
		
		return isAMatch;
		
	}
	
	public static String calculateOrderCost( double cost, int quantity ) {
		
		double orderCost = 0;
		
		orderCost = cost * quantity;
		
		String s = "€"+orderCost;
		
		return s;
		
	}
	
	/*
	 * 
	 * Check if an Order has already been created for a Product - 
	 * if that Product has been already Ordered and the Order has not been received 
	 * another Order should not be allowed
	 * 
	 * */
	
	public static boolean checkForOrders( Product product ) {
		
		boolean cantOrder = false;
		
		for(Order o : RetailSystem.getInstance().getOrders()) {
			
			if( o.getProduct().getProductID().equalsIgnoreCase(product.getProductID()) && !o.isReceived() ) {
				
				cantOrder = true;
				
				break;
				
			}
			
		}
		
		return cantOrder;
		
	}
	
	public static void saveOrder() {
		
	  	 try {
	  		 
	  		 FileWriter orderFile;
	  		 
	  		orderFile = new FileWriter("orders.txt");
	  		
	  		DataBase.writeOrders(RetailSystem.getInstance().getOrders(), orderFile);
	  		
	  		orderFile.close();
	  		
	  	 } catch (Exception exception) {
	  		 
	  		 exception.printStackTrace();
	  		 
	  	 }
	  	 
	}
	
	public Date checkOverdue() {
		return expectedDeliveryDate;
	}
	
	public String getOrderID() {
		return orderID;
	}

	public void setOrderID(String orderID) {
		this.orderID = orderID;
	}

	public Date getOrderDate() {
		return orderDate;
	}

	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}

	public Product getProduct() {
		return product;
	}

	public void setProduct(Product product) {
		this.product = product;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	public Date getExpectedDeliveryDate() {
		return expectedDeliveryDate;
	}

	public void setExpectedDeliveryDate(Date expectedDeliveryDate) {
		this.expectedDeliveryDate = expectedDeliveryDate;
	}

	public Date getDateReceived() {
		return dateReceived;
	}

	public void setDateReceived(Date dateReceived) {
		this.dateReceived = dateReceived;
	}

	public boolean isReceived() {
		return received;
	}

	public void setReceived(boolean received) {
		this.received = received;
	}
	
	public boolean isActive() {
		return active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	public void displayOrder() {
		System.out.println(orderID 
				+ " | " + orderDate 
				+ " | " + product 
				+ " | " + quantity 
				+ " | " + expectedDeliveryDate 
				+ " | " + dateReceived 
				+ " | " + received);
	}
	public Date autogenExpectedDate(Date orderDate){
		
		Calendar cal = Calendar.getInstance();
		cal.setTime(orderDate);
		cal.add(Calendar.DATE, 7);
		return cal.getTime();
	}
}